************************************
My solutions

time:02/25/18
by Huppert-Wu

************************************

PHASE_1
--------------------------------------------------------------------------
0000000000401338 <strings_not_equal>:
  401338:	41 54                	push   %r12
  40133a:	55                   	push   %rbp
  40133b:	53                   	push   %rbx
  40133c:	48 89 fb             	mov    %rdi,%rbx
  40133f:	48 89 f5             	mov    %rsi,%rbp
  401342:	e8 d4 ff ff ff       	callq  40131b <string_length>
  401347:	41 89 c4             	mov    %eax,%r12d
  40134a:	48 89 ef             	mov    %rbp,%rdi
  40134d:	e8 c9 ff ff ff       	callq  40131b <string_length>
  401352:	ba 01 00 00 00       	mov    $0x1,%edx
  401357:	41 39 c4             	cmp    %eax,%r12d
  40135a:	75 3f                	jne    40139b <strings_not_equal+0x63>
  40135c:	0f b6 03             	movzbl (%rbx),%eax
  40135f:	84 c0                	test   %al,%al
  401361:	74 25                	je     401388 <strings_not_equal+0x50>
  401363:	3a 45 00             	cmp    0x0(%rbp),%al
  401366:	74 0a                	je     401372 <strings_not_equal+0x3a>
  401368:	eb 25                	jmp    40138f <strings_not_equal+0x57>
  40136a:	3a 45 00             	cmp    0x0(%rbp),%al
  40136d:	0f 1f 00             	nopl   (%rax)
  401370:	75 24                	jne    401396 <strings_not_equal+0x5e>
  401372:	48 83 c3 01          	add    $0x1,%rbx
  401376:	48 83 c5 01          	add    $0x1,%rbp
  40137a:	0f b6 03             	movzbl (%rbx),%eax
  40137d:	84 c0                	test   %al,%al
  40137f:	75 e9                	jne    40136a <strings_not_equal+0x32>
  401381:	ba 00 00 00 00       	mov    $0x0,%edx
  401386:	eb 13                	jmp    40139b <strings_not_equal+0x63>
  401388:	ba 00 00 00 00       	mov    $0x0,%edx
  40138d:	eb 0c                	jmp    40139b <strings_not_equal+0x63>
  40138f:	ba 01 00 00 00       	mov    $0x1,%edx
  401394:	eb 05                	jmp    40139b <strings_not_equal+0x63>
  401396:	ba 01 00 00 00       	mov    $0x1,%edx
  40139b:	89 d0                	mov    %edx,%eax
  40139d:	5b                   	pop    %rbx
  40139e:	5d                   	pop    %rbp
  40139f:	41 5c                	pop    %r12
  4013a1:	c3                   	retq   

先比较输入字符串的长度，再将两字符串逐byte比较，若不等返回1,相等返回0,答案字符串以ascii码
存于内存，注意上面汇编代码0x401372和0x401376取出后译为
"Border relations with Canada have never been better."
--------------------------------------------------------------------------



PHASE_2
--------------------------------------------------------------------------
0000000000400efc <phase_2>:
  400efc:	55                   	push   %rbp
  400efd:	53                   	push   %rbx
  400efe:	48 83 ec 28          	sub    $0x28,%rsp
  400f02:	48 89 e6             	mov    %rsp,%rsi
  400f05:	e8 52 05 00 00       	callq  40145c <read_six_numbers>
  400f0a:	83 3c 24 01          	cmpl   $0x1,(%rsp)
  400f0e:	74 20                	je     400f30 <phase_2+0x34>
  400f10:	e8 25 05 00 00       	callq  40143a <explode_bomb>
  400f15:	eb 19                	jmp    400f30 <phase_2+0x34>
  400f17:	8b 43 fc             	mov    -0x4(%rbx),%eax
  400f1a:	01 c0                	add    %eax,%eax
  400f1c:	39 03                	cmp    %eax,(%rbx)
  400f1e:	74 05                	je     400f25 <phase_2+0x29>
  400f20:	e8 15 05 00 00       	callq  40143a <explode_bomb>
  400f25:	48 83 c3 04          	add    $0x4,%rbx
  400f29:	48 39 eb             	cmp    %rbp,%rbx
  400f2c:	75 e9                	jne    400f17 <phase_2+0x1b>
  400f2e:	eb 0c                	jmp    400f3c <phase_2+0x40>
  400f30:	48 8d 5c 24 04       	lea    0x4(%rsp),%rbx
  400f35:	48 8d 6c 24 18       	lea    0x18(%rsp),%rbp
  400f3a:	eb db                	jmp    400f17 <phase_2+0x1b>
  400f3c:	48 83 c4 28          	add    $0x28,%rsp
  400f40:	5b                   	pop    %rbx
  400f41:	5d                   	pop    %rbp
  400f42:	c3                   	retq   

在gdb下以si命令进入<read_six_numbers>可知其参数为"\d \d \d \d \d
\d"的6个数字，通过0x400f1a
将%eax与自身相加（即乘2），然后与0x400f1c比较，字符串即为%eax不断倍增的值
"1 2 4 8 16 32"



--------------------------------------------------------------------------



PHASE_3
--------------------------------------------------------------------------
0000000000400f43 <phase_3>:
  400f43:	48 83 ec 18          	sub    $0x18,%rsp
  400f47:	48 8d 4c 24 0c       	lea    0xc(%rsp),%rcx
  400f4c:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  400f51:	be cf 25 40 00       	mov    $0x4025cf,%esi
  400f56:	b8 00 00 00 00       	mov    $0x0,%eax
  400f5b:	e8 90 fc ff ff       	callq  400bf0 <__isoc99_sscanf@plt>
  400f60:	83 f8 01             	cmp    $0x1,%eax
  400f63:	7f 05                	jg     400f6a <phase_3+0x27>
  400f65:	e8 d0 04 00 00       	callq  40143a <explode_bomb>
  400f6a:	83 7c 24 08 07       	cmpl   $0x7,0x8(%rsp)
  400f6f:	77 3c                	ja     400fad <phase_3+0x6a>
  400f71:	8b 44 24 08          	mov    0x8(%rsp),%eax
  400f75:	ff 24 c5 70 24 40 00 	jmpq   *0x402470(,%rax,8)
  400f7c:	b8 cf 00 00 00       	mov    $0xcf,%eax
  400f81:	eb 3b                	jmp    400fbe <phase_3+0x7b>
  400f83:	b8 c3 02 00 00       	mov    $0x2c3,%eax
  400f88:	eb 34                	jmp    400fbe <phase_3+0x7b>
  400f8a:	b8 00 01 00 00       	mov    $0x100,%eax
  400f8f:	eb 2d                	jmp    400fbe <phase_3+0x7b>
  400f91:	b8 85 01 00 00       	mov    $0x185,%eax
  400f96:	eb 26                	jmp    400fbe <phase_3+0x7b>
  400f98:	b8 ce 00 00 00       	mov    $0xce,%eax
  400f9d:	eb 1f                	jmp    400fbe <phase_3+0x7b>
  400f9f:	b8 aa 02 00 00       	mov    $0x2aa,%eax
  400fa4:	eb 18                	jmp    400fbe <phase_3+0x7b>
  400fa6:	b8 47 01 00 00       	mov    $0x147,%eax
  400fab:	eb 11                	jmp    400fbe <phase_3+0x7b>
  400fad:	e8 88 04 00 00       	callq  40143a <explode_bomb>
  400fb2:	b8 00 00 00 00       	mov    $0x0,%eax
  400fb7:	eb 05                	jmp    400fbe <phase_3+0x7b>
  400fb9:	b8 37 01 00 00       	mov    $0x137,%eax
  400fbe:	3b 44 24 0c          	cmp    0xc(%rsp),%eax
  400fc2:	74 05                	je     400fc9 <phase_3+0x86>
  400fc4:	e8 71 04 00 00       	callq  40143a <explode_bomb>
  400fc9:	48 83 c4 18          	add    $0x18,%rsp
  400fcd:	c3                   	retq   

在gdb下stepi进入__isoc99_sscanf函数可知输入格式为"\d
\d"，则应输入两个数字。在行0x400f6a,从0x8(%rsp)取值，即输入的第一个数字num0。判断小于7,之后在行0x400f75由num0决定*402470(,%rax,8)跳转的地址，将相应的0xcf,0x2c3,0x100,0x185,0xce等取出。与行0x400fbe从栈指针0xc(%rsp)去的值作比较，相同则通过。值
"0 207"


--------------------------------------------------------------------------



PHASE_4
--------------------------------------------------------------------------
000000000040100c <phase_4>:
  40100c:	48 83 ec 18          	sub    $0x18,%rsp
  401010:	48 8d 4c 24 0c       	lea    0xc(%rsp),%rcx
  401015:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  40101a:	be cf 25 40 00       	mov    $0x4025cf,%esi
  40101f:	b8 00 00 00 00       	mov    $0x0,%eax
  401024:	e8 c7 fb ff ff       	callq  400bf0 <__isoc99_sscanf@plt>
  401029:	83 f8 02             	cmp    $0x2,%eax
  40102c:	75 07                	jne    401035 <phase_4+0x29>
  40102e:	83 7c 24 08 0e       	cmpl   $0xe,0x8(%rsp)
  401033:	76 05                	jbe    40103a <phase_4+0x2e>
  401035:	e8 00 04 00 00       	callq  40143a <explode_bomb>
  40103a:	ba 0e 00 00 00       	mov    $0xe,%edx
  40103f:	be 00 00 00 00       	mov    $0x0,%esi
  401044:	8b 7c 24 08          	mov    0x8(%rsp),%edi
  401048:	e8 81 ff ff ff       	callq  400fce <func4>
  40104d:	85 c0                	test   %eax,%eax
  40104f:	75 07                	jne    401058 <phase_4+0x4c>
  401051:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%rsp)
  401056:	74 05                	je     40105d <phase_4+0x51>
  401058:	e8 dd 03 00 00       	callq  40143a <explode_bomb>
  40105d:	48 83 c4 18          	add    $0x18,%rsp
  401061:	c3                   	retq   


stepi进入函数__isoc99_scanf(gdb)

0x0000000000400bf0 in __isoc99_sscanf@plt ()
(gdb) step
__isoc99_sscanf (s=0x603870 <input_strings+240> "1 0", format=0x4025cf "%d %d")
at isoc99_sscanf.c:26

可知输入格式行0x40102e要求num0<=0xe,行0x401051要求num1==0,在行0x401029要求返回值为2,根据汇编代码得到c代码
int func4(){
    //              返回值中只有0(0000),1(0001),3(0011),7(0111)通过
    a=dx-s;
    c=((unsigned)a)>>31;
    a=(a+c)>>1;
    c=a+s;
    if (c<=di){
        a=0;
        if (c >= di)
            return a;
        else{
            s = 1 + c;
            func4();
            a = 1 + 2*a;
            return a;
        }
    }
    else{
        dx = c - 1;
        func4();
        a += a;
        return a;
    }
}
答案
"0 0" "1 0" "3 0" "7 0"
--------------------------------------------------------------------------



PHASE_5
--------------------------------------------------------------------------
由行0x40107f可知字符串6个字符，从行0x40108b到行0x4010ac将输入的6个字符的ascii分别and
0xf，即取最后4bits。然后，以这个数到地址0x4024bX(
X为0~f）中取值(size
1byte)，放入此时栈指针上两层的位置（每次一字节），最后跳出循环。由行0x4010b3
0x4010b8可知,将%esi与%rdi字符串指针比较。

为了得到与地址0x40245e相同的值，需要保证在地址0x4024bX中去6个相应的字节,从而要求输入的没个字符的ascii的后4bits能够在0x4024bX得到与0x40245e相同的值
"yonefg"        需要满足字符后4bits为 0x_9 0x_f 0x_e 0x_5 0x_6 0x_7



--------------------------------------------------------------------------



PHASE_6
--------------------------------------------------------------------------
函数代码就不贴了。

1.读6个数字
2.行0x401114至行0x401151判断数字在[1,6]之间，且后面的每个数不与前面重复
3.将栈中每个数字取出,再用7-num[i] (0<=i<=5)后放回
4.

6   0x603320    0x1bb
5   0x603310    0x1dd
4   0x603300    0x2b3
3   0x6032f0    0x39c  
2   0x6032e0    0xa8
1   0x6032d0    0x14c
        0xa8<0x14c<0x1bb<0x1dd<0x2b3<0x39c

若输入5 4 3 2 1 6                                      -------------------
2 3 4 5 6 1                                            |                  |
-----------------                                      --------------------
|            d0 |0x7fffffffdba8                        |               10 |08
-----------------                                      --------------------
|            20 |a0                                    |        0x2b3     |00
-----------------                                      --------------------
|            10 |98                                    |               00 |f8
-----------------                                      --------------------
|            00 |90                                    |        0x39c     |f0
-----------------                                      --------------------
|            fo |88                                    |               f0 |e8
-----------------                                      --------------------
|            e0 |0x...db80                             |        0xa8      |e0
-----------------                                      --------------------
| 2          3  |                                      |               e0 |d8
-----------------                                      --------------------
| 4          5  |                                      |        0x14c     |d0
-----------------                                      --------------------
| 6          1  | 
-----------------

5.以db80中的值(此例子中是e0)为基础，将db88中的值放到*(...db80)+8(此例是e8)中。以此类推,上层值放到下层值+8的地址上。

6.从最初db80中的地址开始比较，*...e0>=*...e8   *...f0>=*...f8  共比较5次

7.排序.
转移5个值，保证前5对数字比较正确
*...e0中的0xa8最小，且0xa8对应的值数字2,需要2之前是2才能保证0xa8>=*...e8，由于数字不重复，所以2放最后。
再得每一层不选相同的数字.还要满足大小关系
2在最后，则1在2前，6在1前，5在6前，4在3前，于是有"3 4 5 6 1 2",再用7相减得答案
"4 3 2 1 6 5"



--------------------------------------------------------------------------



SECRET_PHASE
--------------------------------------------------------------------------
0000000000401242 <secret_phase>:
  401242:	53                   	push   %rbx
  401243:	e8 56 02 00 00       	callq  40149e <read_line>
  401248:	ba 0a 00 00 00       	mov    $0xa,%edx
  40124d:	be 00 00 00 00       	mov    $0x0,%esi
  401252:	48 89 c7             	mov    %rax,%rdi
  401255:	e8 76 f9 ff ff       	callq  400bd0 <strtol@plt>
  40125a:	48 89 c3             	mov    %rax,%rbx
  40125d:	8d 40 ff             	lea    -0x1(%rax),%eax
  401260:	3d e8 03 00 00       	cmp    $0x3e8,%eax
  401265:	76 05                	jbe    40126c <secret_phase+0x2a>
  401267:	e8 ce 01 00 00       	callq  40143a <explode_bomb>
  40126c:	89 de                	mov    %ebx,%esi
  40126e:	bf f0 30 60 00       	mov    $0x6030f0,%edi
  401273:	e8 8c ff ff ff       	callq  401204 <fun7>
  401278:	83 f8 02             	cmp    $0x2,%eax
  40127b:	74 05                	je     401282 <secret_phase+0x40>
  40127d:	e8 b8 01 00 00       	callq  40143a <explode_bomb>
  401282:	bf 38 24 40 00       	mov    $0x402438,%edi
  401287:	e8 84 f8 ff ff       	callq  400b10 <puts@plt>
  40128c:	e8 33 03 00 00       	callq  4015c4 <phase_defused>
  401291:	5b                   	pop    %rbx
 

入口函数phase_defused行0x4015fa函数格式"\d \d
\s"，发现在phase_4以此格式输入且能通过前6阶段后进入secret_phase，进入*0x40160e的函数可得到%s的值是"DrEvil",之后进入secret_phase,调用fun7.

0000000000401204 <fun7>:
  401204:	48 83 ec 08          	sub    $0x8,%rsp
  401208:	48 85 ff             	test   %rdi,%rdi
  40120b:	74 2b                	je     401238 <fun7+0x34>
  40120d:	8b 17                	mov    (%rdi),%edx
  40120f:	39 f2                	cmp    %esi,%edx
  401211:	7e 0d                	jle    401220 <fun7+0x1c>
  401213:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  401217:	e8 e8 ff ff ff       	callq  401204 <fun7>
  40121c:	01 c0                	add    %eax,%eax
  40121e:	eb 1d                	jmp    40123d <fun7+0x39>
  401220:	b8 00 00 00 00       	mov    $0x0,%eax
  401225:	39 f2                	cmp    %esi,%edx
  401227:	74 14                	je     40123d <fun7+0x39>
  401229:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
  40122d:	e8 d2 ff ff ff       	callq  401204 <fun7>
  401232:	8d 44 00 01          	lea    0x1(%rax,%rax,1),%eax
  401236:	eb 05                	jmp    40123d <fun7+0x39>
  401238:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  40123d:	48 83 c4 08          	add    $0x8,%rsp
  401241:	c3                   	retq   

fun7对比*rdi与输入数字num的大小，
func7(){
    if (*P==0)
        return -1;
    x = *P;
    if (x > c)
    {
        P = *(P+1);
        a = func7();
        a = a*2;
        return a;
    }
    else
    {
        a=0;
        if (x == c)
            return 0;
        else
        {
            P = *(P+2);
            a = func7();
            a = 2*a+1;
            return a;
        }
    }
}
大概这么个意思，递归的同时递增pointer,
2 = 2*1; then 1=2*0+1; 0= return 0;
2 = 2*( 2*( return 0) + 1)

answer: "22"
--------------------------------------------------------------------------




